{"version":3,"sources":["components/AddTodo/AddTodo.tsx","components/AddTodo/index.tsx","components/DisplayTodoLists/Todo.tsx","components/DisplayTodoLists/DisplayTodoLists.tsx","components/DisplayTodoLists/index.tsx","components/TodoList/TodoList.tsx","components/TodoList/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["styles","container","backgroundColor","borderRadius","position","bottom","width","height","padding","textAlign","display","addButton","border","color","fontSize","margin","input","AddTodo","todoArr","setTodoArr","useState","editText","setEditText","onSubmitTodoTextClick","id","nanoid","text","isComplete","style","value","onChange","event","target","onKeyDown","e","code","preventDefault","stopPropagation","onSubmitText","type","placeholder","onClick","alignItems","justifyContent","borderBottom","checkbox","textWrap","paddingLeft","inputForEdit","boxShadow","iconStyle","cursor","marginLeft","Todo","isOnEdit","setIsOnEdit","isCrossTextClass","setIsCrossTextClass","checked","onCheckIsComplete","changeText","console","log","textDecoration","newArray","filter","flexDirection","DisplayTodoLists","map","todo","index","minWidth","minHeight","initialToDoList","TodoList","fontWeight","marginBottom","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddb70469.chunk.js","sourcesContent":["import React,{ useState, Dispatch, SetStateAction } from 'react';\nimport { nanoid } from 'nanoid';\nimport CSS from 'csstype';\nimport {TodoType} from '../TodoList/TodoList';\n\ninterface Props{\n    todoArr:TodoType[];\n    setTodoArr: Dispatch<SetStateAction<TodoType[]>>;\n}\n\nconst AddTodo:React.FC<Props> = ({todoArr, setTodoArr}) => {\n    // user type on textfiled\n    // user click add button\n    // store data somewhere\n    // we store (dataText, id, isChecked)\n    // display new todo  below\n    const [editText, setEditText] = useState<string>(\"\")\n\n    const onTextChange = (text:string) => {\n        setEditText(text)\n    }\n    const onSubmitTodoTextClick =() => {\n       setTodoArr([...todoArr,{\n           id: nanoid(),\n           text: editText,\n           isComplete: false\n       }])\n\n       setEditText('');\n    }\n\n    const onSubmitText = (e: any) => {\n        if(e.code === 'Enter'){\n            e.preventDefault();\n            e.stopPropagation();\n            onSubmitTodoTextClick()\n        }\n    }\n    return (\n\n        <div style = {styles.container}>\n            <input value={editText} \n            onChange={event => onTextChange(event.target.value)} \n            onKeyDown={(e) => onSubmitText(e)}\n            style={styles.input} \n            type=\"text\" \n            placeholder=\"Create New To Do Here\"/>\n            <button onClick={onSubmitTodoTextClick}style={styles.addButton}>+</button>\n         </div>\n    );\n};\nconst styles:{\n    container: CSS.Properties;\n    addButton: CSS.Properties;\n    input: CSS.Properties;\n\n} = {\n    container: {\n        backgroundColor: '#e75480',\n        borderRadius: '10px',\n        position:'absolute',\n        bottom: '-30px',\n        width: '70%',\n        height:'50px',\n        padding: '10px',\n        textAlign: 'center',\n        display:'flex',\n       \n\n    },\n    addButton: {\n        backgroundColor: 'transparent',\n        border: 'none',\n        color: '#f8f2fe',\n       fontSize:'48px',\n        margin: '0 auto'\n    },\n    input: {\n        height: '50px',\n        width: '80%',\n        border: 'none',\n        fontSize:'24px',\n        color: 'rgb(4, 57, 39)'\n    }\n}\nexport default AddTodo;","import AddTodo from './AddTodo';\n\nexport default AddTodo;","import React, {Dispatch, SetStateAction, useState} from 'react';\nimport { BsTrash } from 'react-icons/bs';\nimport {TodoType} from '../TodoList/TodoList';\nimport {FiEdit} from 'react-icons/fi';\n\ninterface Props {\n    text: string;\n    id: string;\n    todoArr: TodoType[];\n    isComplete: boolean;\n    setTodoArr: Dispatch<SetStateAction<TodoType[]>>;\n}\n\nconst Todo: React.FC<Props> = ({text, id,isComplete, todoArr, setTodoArr}) => {\n    const [isOnEdit, setIsOnEdit] = useState(false);\n    const [editText, setEditText] = useState(text);\n    const [isCrossTextClass, setIsCrossTextClass] = useState(false);\n    const onClickTrash =()=> {\n     const newArray = todoArr.filter(text => text.id !== id)\n      setTodoArr(newArray);\n    }\n    const onClickEdit = () => {\n        setIsOnEdit(true);\n    }\n\n    const onSubmitText = (e: any) => {\n        console.log(e.code)\n        if(e.code === 'Enter'){\n            setIsOnEdit(false);\n        }\n    }\n\n    const onEditTextChange = (changeText: string)=> {\n        setEditText(changeText);\n    }\n\n    const onCheckIsComplete = (e: any) => {\n        if(e.target.checked)\n            setIsCrossTextClass(true);\n            else\n            setIsCrossTextClass(false);\n\n    }\n    return (\n        <div style={styles.container}>\n            <input style={styles.checkbox} type=\"checkbox\" onClick={(e) => onCheckIsComplete(e)}/>\n            <div style={styles.textWrap}>\n                {isOnEdit?\n                <input\n                type=\"text\"\n                style={styles.inputForEdit}\n                value={editText}\n                onChange={event => onEditTextChange(event.target.value)}\n                onKeyDown={(e) => onSubmitText(e)}\n                />:<p style={{textDecoration:isCrossTextClass?\"line-through\":\"none\"}}>{editText}</p>}\n            </div>\n            <FiEdit style={styles.iconStyle} onClick={onClickEdit}/>\n            <BsTrash style={styles.iconStyle} onClick={onClickTrash}/>\n        </div>\n    );\n};\n\nconst styles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n       borderBottom: 'solid #9ab10a 2px',\n        fontSize: '24px',\n        color: '#043927',      \n    },\n    checkbox: {\n       \n    },\n    textWrap: {\n        width: '100%',\n        paddingLeft:\"20px\",\n    },\n    inputForEdit: {\n        fontSize:'24px',\n        width: '90%',\n        border: \"2px solid green\",\n        backgroundColor:\"#feff9e\",\n        borderRadius: \"4px\",\n        boxShadow: \"10px 0px 20px white\"\n    },\n    iconStyle: {\n        cursor:'pointer',\n        marginLeft:\"15px\"\n    }\n\n}\nexport default Todo;","import React, {Dispatch, SetStateAction} from 'react';\nimport Todo from './Todo';\nimport Css from 'csstype';\nimport {TodoType} from '../TodoList/TodoList';\n\ninterface Props{\n    todoArr:TodoType[];\n    setTodoArr: Dispatch<SetStateAction<TodoType[]>>;\n    \n}\n\n\nconst DisplayTodoLists:React.FC<Props> = ({todoArr, setTodoArr}) => {\n    return (\n        <div style = {styles.container}>\n            {\n            todoArr.map((todo, index) => (\n                <Todo\n                key={index}\n                text={todo.text}\n                isComplete={todo.isComplete}\n                id={todo.id}\n                todoArr={todoArr}\n                setTodoArr={setTodoArr}\n                />\n            ))\n        }\n        </div>\n    );\n};\nconst styles: {\n    container: Css.Properties\n} = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\nwidth: '80%'\n    }\n}\nexport default DisplayTodoLists;","import DisplayTodoLists from  './DisplayTodoLists';\n\nexport default DisplayTodoLists;","import React, {useState, useEffect} from 'react';\nimport AddTodo from '../AddTodo';\nimport DisplayTodoLists from '../DisplayTodoLists';\nimport CSS from 'csstype';\nimport { nanoid } from 'nanoid';\n\nconst styles:{\n    container: CSS.Properties;\n} = {\n    container: {\n        backgroundColor: \"#fafafa\",\n        display: \"flex\",\n        flexDirection: 'column',\n        justifyContent: \"flex-start\",\n        minWidth: '300px',\n        minHeight: '400px',\n        width:'40%',\n        position: 'relative',\n        alignItems: 'center',\n        padding: '20px',\n        border: 'solid #9ab10a 10px',\n        boxShadow: '0 0 10px white',\n        borderRadius: '20px'\n\n    }\n}\n\nexport type TodoType = {\n    id: string;\n    text: string;\n    isComplete: boolean;\n};\nconst initialToDoList = [\n    {\n        id: nanoid(),\n        text: \"To do List 1\",\n        isComplete: false\n    },\n    {\n        id: nanoid(),\n        text: \"To do List 2\",\n        isComplete: false\n    },\n    {\n        id: nanoid(),\n        text: \"To do List 3\",\n        isComplete: false\n    },\n\n]\nconst TodoList = () => {\n    // onClick from todoList\n    // update data from the child component(input)\n    // get new data from input and still save old data\n    // copy old data and add new data\n    const [todoArr, setTodoArr] = useState<TodoType[]>(initialToDoList);\n    \n    return (\n        <div style={styles.container}>\n            \n            <DisplayTodoLists todoArr={todoArr} setTodoArr={setTodoArr} />\n            <AddTodo todoArr={todoArr} setTodoArr={setTodoArr} />\n            \n        </div>\n    );\n};\n\nexport default TodoList;","import TodoList from './TodoList';\n\nexport default TodoList;","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={styles.container}>TO DO LIST</h1>\n      <TodoList />\n    </div>\n  );\n}\nconst styles = {\n  container: {\n    backgroundColor: \"#e75480\",\n    color: \"#fafafa\",\n    fontWeight: \"800\",\n    minWidth: \"300px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    fontSize: \"24px\",\n    marginBottom: \"10px\",\n    borderRadius: \"20px\",\n  },\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}